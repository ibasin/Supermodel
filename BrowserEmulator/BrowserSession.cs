using System;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.IO;
using System.Text;
/*
using ICSharpCode.SharpZipLib.BZip2;
using ICSharpCode.SharpZipLib.Zip;
using ICSharpCode.SharpZipLib.Zip.Compression;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using ICSharpCode.SharpZipLib.GZip;
 */
namespace BrowserEmulator {
	public class DefaultCertificatePolicy : ICertificatePolicy {
		public bool CheckValidationResult(ServicePoint srvPoint, X509Certificate certificate, WebRequest request, int certificateProblem) {
			//Return True to force any certificate to be accepted.
			return true;
		}
	}

	public class BrowserSession {
		public BrowserSession() { }
		public void Reset() {
			SessionCookies = new CookieContainer();
			mReferrer = "";
		}

		/*
		public string GenerateCookieScript(string url)
		{
			StringBuilder str = new StringBuilder();
			CookieCollection cookies = sessionCookies.GetCookies(new Uri(url));
			for (int i = 0; i<cookies.Count; i++)
			{
				str.Append("document.cookie = '" + cookies[i].Name + "=" + cookies[i].Value + "; path=" + cookies[i].Path + "; domain=" + cookies[i].Domain + "';\n");
			}
			return str.ToString();
		}
		*/

		/*
		public byte[] HTTPGetBinary(string url, int timeout, int maxBytes)
		{
			HttpWebRequest request = SetUpHeader(url, timeout);
			request.Method = "GET";
			request.Proxy = proxy;

			byte[] file = GetBinaryResponse(request, maxBytes);

			sessionCookies = request.CookieContainer;
			_referer = url;
			return file;
		}
		*/

		public string HTTPGet(string url, int timeout) {
			HttpWebRequest request = SetUpHeader(url, timeout);
			request.Method = "GET";
			request.Proxy = Proxy;

			string pageHTML = GetStringResponse(request);

			SessionCookies = request.CookieContainer;
			mReferrer = url;
			return pageHTML;
		}
		public byte[] HTTPGetReceiveBinary(string url, int timeout) {
			HttpWebRequest request = SetUpHeader(url, timeout);
			request.Method = "GET";
			request.Proxy = Proxy;

			byte[] file = GetBinaryResponse(request);

			SessionCookies = request.CookieContainer;
			mReferrer = url;
			return file;
		}

		public FieldsCollection GetDotNetPostbackInput(string page, string formName, string formAction, string postbackField, string eventArg, string url, FieldsCollection variablePostbackFields, int timeout, bool fieldValidation) {
			FieldsCollection input = new FieldsCollection();
			input.AutogenerateDefaultFields(page, formName, formAction);

			if (fieldValidation == true) {
				//check to see that postback field exist
				try {
					input.GetKey(postbackField);
				}
				catch (FieldDoesNotExistException) {
					throw new BrowserEmulatorException("Postback field (" + postbackField + ") does not exist on the page");
				}
			}
			input["__EVENTTARGET"].HttpValue = postbackField;
			input["__EVENTARGUMENT"].HttpValue = eventArg;
			input["__VIEWSTATE"].HttpValue = FieldsCollection.GetVIEWSTATE(page, formName, formAction);

			// if value changed we submit
			bool submit = true;
			if (fieldValidation == true) {
				if (input[postbackField].HttpValue == variablePostbackFields[postbackField].HttpValue) submit = false;
			}

			input.MergeReplace(variablePostbackFields);
			input.DoNotSubmitSubmit();
			input.ValidateAgainstHTMLPage(page, formName, formAction);

			//if we don't need to submit we return null
			if (submit == true) return input;
			else return null;
		}

		public string HTTPDotNetPostbackNoFieldValidation(string page, string formName, string formAction, string postbackField, string eventArg, string url, FieldsCollection variablePostbackFields, int timeout) {
			FieldsCollection input = GetDotNetPostbackInput(page, formName, formAction, postbackField, eventArg, url, variablePostbackFields, timeout, false);
			//return input.GetHTTPKeysAndValuesStringWithBR();
			if (input != null) return HTTPPost(url, input, timeout);
			else return page;
		}

		public string HTTPDotNetPostback(string page, string formName, string formAction, string postbackField, string eventArg, string url, FieldsCollection variablePostbackFields, int timeout) {
			FieldsCollection input = GetDotNetPostbackInput(page, formName, formAction, postbackField, eventArg, url, variablePostbackFields, timeout, true);
			//return input.GetHTTPKeysAndValuesStringWithBR();
			if (input != null) return HTTPPost(url, input, timeout);
			else return page;
		}

		public string HTTPPost(string url, FieldsCollection fields, int timeout) {
			HttpWebRequest request = SetUpHeader(url, timeout);
			request.Method = "POST";
			request.Proxy = Proxy;

			UTF8Encoding utf8Encoding = new UTF8Encoding();
			Byte[] requestBody = utf8Encoding.GetBytes(fields.GetHTTPKeysAndValuesString());
			request.ContentLength = requestBody.Length;

			request.GetRequestStream().Write(requestBody, 0, requestBody.Length);
			request.GetRequestStream().Close();

			string pageHTML = GetStringResponse(request);

			SessionCookies = request.CookieContainer;
			mReferrer = url;
			return pageHTML;
		}
		public byte[] HTTPPostReceiveBinary(string url, FieldsCollection fields, int timeout) {
			HttpWebRequest request = SetUpHeader(url, timeout);
			request.Method = "POST";
			request.Proxy = Proxy;

			UTF8Encoding utf8Encoding = new UTF8Encoding();
			Byte[] requestBody = utf8Encoding.GetBytes(fields.GetHTTPKeysAndValuesString());
			request.ContentLength = requestBody.Length;

			request.GetRequestStream().Write(requestBody, 0, requestBody.Length);
			request.GetRequestStream().Close();

			byte[] file = GetBinaryResponse(request);

			SessionCookies = request.CookieContainer;
			mReferrer = url;
			return file;
		}

		public string HTTPPostFile(string url, Byte[] file, int timeout) {
			HttpWebRequest request = SetUpHeader(url, timeout);
			request.Method = "POST";
			request.Proxy = Proxy;

			Byte[] requestBody = file;
			request.ContentLength = requestBody.Length;

			request.GetRequestStream().Write(requestBody, 0, requestBody.Length);
			request.GetRequestStream().Close();

			string pageHTML = GetStringResponse(request);

			SessionCookies = request.CookieContainer;
			mReferrer = url;
			return pageHTML;
		}

		public byte[] HTTPPostFileReceiveBinary(string url, Byte[] file, int timeout) {
			HttpWebRequest request = SetUpHeader(url, timeout);
			request.Method = "POST";
			request.Proxy = Proxy;

			Byte[] requestBody = file;
			request.ContentLength = requestBody.Length;

			request.GetRequestStream().Write(requestBody, 0, requestBody.Length);
			request.GetRequestStream().Close();

			byte[] responseFile = GetBinaryResponse(request);

			SessionCookies = request.CookieContainer;
			mReferrer = url;
			return responseFile;
		}

		public string HTTPPostStringFile(string url, string stringFile, int timeout) {
			UTF8Encoding utf8Encoding = new UTF8Encoding();
			return HTTPPostFile(url, utf8Encoding.GetBytes(stringFile), timeout);
		}

		public static byte[] Stream2ByteArray(Stream stream) {
			byte[] buffer = new byte[32768];
			using (MemoryStream ms = new MemoryStream()) {
				while (true) {
					int read = stream.Read(buffer, 0, buffer.Length);
					if (read <= 0) return ms.ToArray();
					ms.Write(buffer, 0, read);
				}
			}
		}
		private byte[] GetBinaryResponse(HttpWebRequest request) {
			HttpWebResponse response = (HttpWebResponse)request.GetResponse();
			ResponseAbsoluteUrl = response.ResponseUri.AbsoluteUri;
			ResponseAbsolutePath = response.ResponseUri.AbsolutePath;

			//this is to handle gzip and deflate encodings
			Stream compressedStream = null;
			Stream responseStream;

			//if (response.ContentEncoding == "gzip") compressedStream =  new GZipInputStream(response.GetResponseStream());
			//if (response.ContentEncoding == "deflate") compressedStream = new InflaterInputStream(response.GetResponseStream());
			if (compressedStream != null) {
				// if we need to decompress
				MemoryStream decompressedStream = new MemoryStream();
				int size = 2048;
				byte[] writeData = new byte[2048];
				while (true) {
					int bytesRead = compressedStream.Read(writeData, 0, size);
					if (bytesRead > 0) decompressedStream.Write(writeData, 0, bytesRead);
					else break;
				}
				decompressedStream.Seek(0, SeekOrigin.Begin);
				responseStream = decompressedStream;
			} else {
				//if this is plain text
				responseStream = response.GetResponseStream();
			}

			return Stream2ByteArray(responseStream);
		}

		private string GetStringResponse(HttpWebRequest request) {
			HttpWebResponse response = (HttpWebResponse)request.GetResponse();
			ResponseAbsoluteUrl = response.ResponseUri.AbsoluteUri;
			ResponseAbsolutePath = response.ResponseUri.AbsolutePath;

			//this is to handle gzip and deflate encodings
			Stream compressedStream = null;
			Stream responseStream;

			//if (response.ContentEncoding == "gzip") compressedStream =  new GZipInputStream(response.GetResponseStream());
			//if (response.ContentEncoding == "deflate") compressedStream = new InflaterInputStream(response.GetResponseStream());
			if (compressedStream != null) {
				// if we need to decompress
				MemoryStream decompressedStream = new MemoryStream();
				int size = 2048;
				byte[] writeData = new byte[2048];
				while (true) {
					size = compressedStream.Read(writeData, 0, size);
					if (size > 0) decompressedStream.Write(writeData, 0, size);
					else break;
				}
				decompressedStream.Seek(0, SeekOrigin.Begin);
				responseStream = decompressedStream;
			} else {
				//if this is plain text
				responseStream = response.GetResponseStream();
			}

			StreamReader stream = new StreamReader(responseStream, Encoding.ASCII);
			string pageHTML = stream.ReadToEnd();
			stream.Close();
			return pageHTML;
		}

		private HttpWebRequest SetUpHeader(string url, int timeout) {
			//this is to make sure any SSL certificates are accepted
			System.Net.ServicePointManager.CertificatePolicy = new DefaultCertificatePolicy();

			HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);

			request.Proxy = Proxy;
			request.Timeout = request.ReadWriteTimeout = timeout;

			request.ProtocolVersion = ProtocolVersion;

			request.Accept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/x-shockwave-flash, */*";
			request.ContentType = "application/x-www-form-urlencoded";
			request.UserAgent = "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR 1.1.4322)";
			request.Headers.Add("Accept-Language: en-us");
			if (AcceptGZipAndDeflateEncodings == true) {
				request.Headers.Add("Accept-Encoding: gzip, deflate");
			}
			request.Headers.Add("Cache-Control: no-cache");
			request.AllowAutoRedirect = AllowAutoRedirect;
			request.CookieContainer = SessionCookies;
			//request.KeepAlive = true;
			if (mReferrer != "") request.Referer = mReferrer;
			return request;
		}

		public WebProxy Proxy {
			get {
				return mProxy;
			}
			set {
#if(RELEASE)
			throw(new NotSupportedException("Setting the proxy is not allowed in release mode."));
#endif

				if (value == null) {

					mProxy = WebProxy.GetDefaultProxy();
				} else {
					mProxy = value;
				}
			}
		}
		public bool UseFiddlerProxy {
			set {
				if (value == true) Proxy = new WebProxy("127.0.0.1", 8888);
				else mProxy = WebProxy.GetDefaultProxy();
			}
		}

		public bool AcceptGZipAndDeflateEncodings = false;
		public string ResponseAbsoluteUrl = "";
		public string ResponseAbsolutePath = "";
		public bool AllowAutoRedirect = true;
		public System.Version ProtocolVersion = HttpVersion.Version11;
		public CookieContainer SessionCookies = new CookieContainer();
		private string mReferrer = "";
		private WebProxy mProxy = WebProxy.GetDefaultProxy();
	}
}
